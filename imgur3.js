const axios = require("axios");
const FormData = require("form-data");

module.exports = {
  config: {
    name: "imgur",
    version: "1.1",
    author: "Your Name",
    countDown: 10,
    role: 0,
    shortDescription: "Upload images/videos to Imgur",
    longDescription: "Reply to a photo/gif/video with {pn}imgur to upload to Imgur",
    category: "utility",
    guide: "{pn}imgur"
  },

  onReply: async function ({ event, message }) {
    if (event.type !== "message_reply") return;
    const replyMessage = event.body.toLowerCase();
    if (!replyMessage.includes("imgur")) return;

    try {
      const attachments = event.messageReply.attachments;
      if (!attachments || attachments.length === 0) {
        return message.reply("тЭМ | ржЖржкржирж┐ ржХрзЛржи ржЫржмрж┐/GIF/ржнрж┐ржбрж┐ржУ рж░рж┐ржкрзНрж▓рж╛ржЗ ржХрж░рзЗржи ржирж┐!");
      }

      const clientId = process.env.IMGUR_CLIENT_ID || "6f1378a5a0c652e";
      const links = [];

      for (const attachment of attachments) {
        if (!["photo", "animated_image", "video"].includes(attachment.type)) {
          message.reply("тЭМ | рж╢рзБржзрзБржорж╛рждрзНрж░ ржЫржмрж┐, GIF ржмрж╛ ржнрж┐ржбрж┐ржУ ржЖржкрж▓рзЛржб ржХрж░рж╛ ржпрж╛ржмрзЗ!");
          continue;
        }

        // Validate attachment.url
        console.log("Attachment:", attachment); // Debug log
        if (!attachment.url || typeof attachment.url !== "string") {
          message.reply("тЭМ | Attachment URL is missing or invalid!");
          continue;
        }

        // Download the file
        const imageResponse = await axios.get(attachment.url, {
          responseType: "arraybuffer"
        });

        // Validate file size
        const maxFileSize = attachment.type === "video" ? 200 * 1024 * 1024 : 20 * 1024 * 1024;
        if (imageResponse.data.length > maxFileSize) {
          message.reply(`тЭМ | ржлрж╛ржЗрж▓рзЗрж░ ржЖржХрж╛рж░ ржЦрзБржм ржмржбрж╝! рж╕рж░рзНржмрзЛржЪрзНржЪ ржЖржХрж╛рж░: ${maxFileSize / (1024 * 1024)}MB`);
          continue;
        }

        // Upload to Imgur
        const formData = new FormData();
        formData.append("image", Buffer.from(imageResponse.data, "binary"));
        const uploadResponse = await axios.post("https://api.imgur.com/3/image", formData, {
          headers: {
            Authorization: `Client-ID ${clientId}`,
            ...formData.getHeaders()
          }
        });

        if (uploadResponse.data.success) {
          links.push(uploadResponse.data.data.link);
        } else {
          message.reply("тЭМ | ржЖржкрж▓рзЛржб ржмрзНржпрж░рзНрже рж╣ржпрж╝рзЗржЫрзЗ, ржжржпрж╝рж╛ ржХрж░рзЗ ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред");
        }
      }

      if (links.length > 0) {
        message.reply(`тЬЕ | рж╕ржлрж▓ржнрж╛ржмрзЗ Imgur-ржП ржЖржкрж▓рзЛржб ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!\nЁЯФЧ рж▓рж┐ржВржХ:\n${links.join("\n")}`);
      } else {
        message.reply("тЭМ | ржХрзЛржирзЛ ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб ржХрж░рж╛ ржпрж╛ржпрж╝ржирж┐ред");
      }
    } catch (error) {
      console.error("Error details:", error.stack); // Log full error stack
      if (error.response && error.response.status === 429) {
        return message.reply("тЭМ | Imgur API рж░рзЗржЯ рж▓рж┐ржорж┐ржЯ ржЕрждрж┐ржХрзНрж░ржо ржХрж░рзЗржЫрзЗред ржжржпрж╝рж╛ ржХрж░рзЗ ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред");
      }
      if (error.response) {
        return message.reply(`тЭМ | Imgur API рждрзНрж░рзБржЯрж┐: ${error.response.data.data.error || error.message}`);
      }
      if (error.request) {
        return message.reply("тЭМ | ржирзЗржЯржУржпрж╝рж╛рж░рзНржХ рждрзНрж░рзБржЯрж┐: рж╕рж╛рж░рзНржнрж╛рж░рзЗрж░ рж╕рж╛ржерзЗ рж╕ржВржпрзЛржЧ ржХрж░рж╛ ржпрж╛ржпрж╝ржирж┐ред");
      }
      message.reply(`тЭМ | ржПржХржЯрж┐ рждрзНрж░рзБржЯрж┐ ржШржЯрзЗржЫрзЗ: ${error.message}`);
    }
  }
};
